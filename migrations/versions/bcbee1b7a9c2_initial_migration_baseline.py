"""Initial migration - baseline

Revision ID: bcbee1b7a9c2
Revises: 
Create Date: 2025-06-26 07:45:29.913899

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bcbee1b7a9c2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('processing_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_sessions_expires'))
        batch_op.drop_index(batch_op.f('idx_sessions_project'))
        batch_op.drop_index(batch_op.f('idx_sessions_status'))
        batch_op.drop_index(batch_op.f('idx_sessions_user'))

    op.drop_table('processing_sessions')
    with op.batch_alter_table('activity_log', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_activity_user'))

    with op.batch_alter_table('inventory_pieces', schema=None) as batch_op:
        batch_op.alter_column('cut_size',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('remaining_size',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)

    with op.batch_alter_table('optimization_results', schema=None) as batch_op:
        batch_op.alter_column('design_waste_percent',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('optimized_waste_percent',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('improvement_percent',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('processing_time_seconds',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.drop_index(batch_op.f('idx_optimization_waste'))

    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.add_column(sa.Column('step1_session_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('step2_session_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('step3_session_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('step4_session_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('step5_session_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('step6_session_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('step7_session_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('step8_session_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('step9_session_data', sa.JSON(), nullable=True))
        batch_op.alter_column('total_area',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('design_waste_percent',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('optimized_waste_percent',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('actual_waste_percent',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.drop_index(batch_op.f('idx_projects_created'))
        batch_op.drop_index(batch_op.f('idx_projects_user'))

    with op.batch_alter_table('rooms', schema=None) as batch_op:
        batch_op.alter_column('area',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('perimeter',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('compactness',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('rectangularity',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('aspect_ratio',
               existing_type=sa.NUMERIC(precision=5, scale=3),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('start_point_x',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('start_point_y',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('sp_relative_x',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('sp_relative_y',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('sp_dist_to_centroid',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('sp_dist_to_nearest_wall',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('orientation_angle',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.drop_index(batch_op.f('idx_rooms_area'))
        batch_op.drop_index(batch_op.f('idx_rooms_project'))

    with op.batch_alter_table('tile_configs', schema=None) as batch_op:
        batch_op.alter_column('tile_width',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('tile_height',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('grout_thickness',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True,
               existing_server_default=sa.text('3.0'))
        batch_op.alter_column('full_tile_ratio',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('cut_tile_ratio',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('irregular_ratio',
               existing_type=sa.NUMERIC(precision=5, scale=4),
               type_=sa.Float(),
               existing_nullable=True)

    with op.batch_alter_table('user_dashboards', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('user_dashboards_user_id_key'), type_='unique')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('project_limit')
        batch_op.drop_column('status')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('project_limit', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True))

    with op.batch_alter_table('user_dashboards', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('user_dashboards_user_id_key'), ['user_id'], postgresql_nulls_not_distinct=False)

    with op.batch_alter_table('tile_configs', schema=None) as batch_op:
        batch_op.alter_column('irregular_ratio',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True)
        batch_op.alter_column('cut_tile_ratio',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True)
        batch_op.alter_column('full_tile_ratio',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True)
        batch_op.alter_column('grout_thickness',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True,
               existing_server_default=sa.text('3.0'))
        batch_op.alter_column('tile_height',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.alter_column('tile_width',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)

    with op.batch_alter_table('rooms', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_rooms_project'), ['project_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_rooms_area'), ['area'], unique=False)
        batch_op.alter_column('orientation_angle',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.alter_column('sp_dist_to_nearest_wall',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.alter_column('sp_dist_to_centroid',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.alter_column('sp_relative_y',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True)
        batch_op.alter_column('sp_relative_x',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True)
        batch_op.alter_column('start_point_y',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.alter_column('start_point_x',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.alter_column('aspect_ratio',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=3),
               existing_nullable=True)
        batch_op.alter_column('rectangularity',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True)
        batch_op.alter_column('compactness',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=4),
               existing_nullable=True)
        batch_op.alter_column('perimeter',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.alter_column('area',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)

    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_projects_user'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_projects_created'), [sa.literal_column('created_at DESC')], unique=False)
        batch_op.alter_column('actual_waste_percent',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.alter_column('optimized_waste_percent',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.alter_column('design_waste_percent',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.alter_column('total_area',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.drop_column('step9_session_data')
        batch_op.drop_column('step8_session_data')
        batch_op.drop_column('step7_session_data')
        batch_op.drop_column('step6_session_data')
        batch_op.drop_column('step5_session_data')
        batch_op.drop_column('step4_session_data')
        batch_op.drop_column('step3_session_data')
        batch_op.drop_column('step2_session_data')
        batch_op.drop_column('step1_session_data')

    with op.batch_alter_table('optimization_results', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_optimization_waste'), ['optimized_waste_percent'], unique=False)
        batch_op.alter_column('processing_time_seconds',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.alter_column('improvement_percent',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.alter_column('optimized_waste_percent',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
        batch_op.alter_column('design_waste_percent',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)

    with op.batch_alter_table('inventory_pieces', schema=None) as batch_op:
        batch_op.alter_column('remaining_size',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
        batch_op.alter_column('cut_size',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)

    with op.batch_alter_table('activity_log', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_activity_user'), ['user_id', sa.literal_column('created_at DESC')], unique=False)

    op.create_table('processing_sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'created'::character varying"), autoincrement=False, nullable=True),
    sa.Column('current_step', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('dxf_file_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('step1_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('step2_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('step3_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('step4_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('step5_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('step6_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('step7_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('step8_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('step9_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result_files', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("(now() + '24:00:00'::interval)"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('processing_sessions_pkey'))
    )
    with op.batch_alter_table('processing_sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_sessions_user'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_sessions_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_sessions_project'), ['project_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_sessions_expires'), ['expires_at'], unique=False)

    # ### end Alembic commands ###
